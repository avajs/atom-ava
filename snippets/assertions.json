{
	".source.js, .source.jsx, .source.ts": {
		"t.pass()": {
			"prefix": "tpass",
			"body": "t.pass(${1:'${2:message}'});"
		},
		"t.fail()": {
			"prefix": "tfail",
			"body": "t.fail(${1:'${2:message}'});"
		},
		"t.ok()": {
			"prefix": "tok",
			"body": "t.ok(${1:value}${2:, '${3:message}'});"
		},
		"t.notOk()": {
			  "prefix": "tnotok",
			  "body": "t.notOk(${1:value}${2:, '${3:message}'});"
		  },
		  "t.true()": {
			  "prefix": "ttrue",
			  "body": "t.true(${1:value}${2:, '${3:message}'});"
		  },
		  "t.false()": {
			  "prefix": "tfalse",
			  "body": "t.false(${1:value}${2:, '${3:message}'});"
		  },
		  "t.is()": {
			  "prefix": "tis",
			  "body": "t.is(${1:value}, ${2:expected}${3:, '${4:message}'});"
		  },
		  "t.not()": {
			  "prefix": "tnot",
			  "body": "t.not(${1:value}, ${2:expected}${3:, '${4:message}'});"
		  },
		  "t.same()": {
			  "prefix": "tsame",
			  "body": "t.same(${1:value}, ${2:expected}${3:, '${4:message}'});"
		  },
		  "t.notSame()": {
			  "prefix": "tnotsame",
			  "body": "t.notSame(${1:value}, ${2:expected}${3:, '${4:message}'});"
		  },
		  "t.throws()": {
			  "prefix": "tthrows",
			  "body": "t.throws(${1:function|promise}${2:, ${3:expected}${4:, '${5:message}'}});"
		  },
		  "t.notThrows()": {
			  "prefix": "t.notehrows",
			  "body": "t.notThrows(${1:function|promise}${2:, '${3:message}'});"
		  },
		  "t.regex()": {
			  "prefix": "tregex",
			  "body": "t.regex(${1:contents}, ${2:regex}${3:, '${4:message}'});"
		  },
		  "t.ifError()": {
			  "prefix": "tiferror",
			  "body": "t.ifError(${1:error}${2:, '${3:message}'});"

	}
}
